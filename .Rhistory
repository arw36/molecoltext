locs<-c("JUN","FHL","MEA","PSG","MEN","BOD","LIN","TPT","HOP","SHB","GOL")
lats<-c(58.3,48.5,45.48,41.7,40.5,38.33,37.61,36.94,36.62,35.16,34.4)
longs<-c(-134.4,-123.01,-123.96,-124.25,-124.41,-123.04,-122.48,-122.06,-121.904,-120.69,-119.84)
# for plotting labels
rightlats<-lats[-c(1,8)]
rightlongs<-longs[-c(1,8)]
rightlocs<-locs[-c(1,8)]
leftlats<-lats[c(1,8)]
leftlongs<-longs[c(1,8)]
leftlocs<-locs[c(1,8)]
PSGlats<-lats[c(4)]
PSGlongs<-longs[c(4)]
PSG<-cbind(PSGlongs,PSGlats)
pdf("MapFig1.pdf")
m0 <- maps::map(database = "world", plot = TRUE, fill=FALSE, xlim = c(-140,-118), ylim = c(30,60),lforce="n")
points(locpoints,cex=2,pch=24,col="darkblue",bg="steelblue",xlab="longitude",ylab="latitude")
points(PSG,cex=2,pch=17,col="black")
#points(PSG,cex=3,pch=4,col="black")
text(rightlongs,rightlats,rightlocs,pos=2,offset=1.5,cex=1)
text(leftlongs,leftlats,leftlocs,pos=4,offset=1,cex=1)
dev.off()
install.packages(c("ade4", "ape", "backports", "BDgraph", "BH", "bit", "boot", "broom", "calibrate", "callr", "class", "cli", "clipr", "clusterGeneration", "coda", "codetools", "colorspace", "covr", "crayon", "crosstalk", "crul", "dartR", "data.table", "DBI", "dbplyr", "deldir", "devtools", "digest", "directlabels", "dismo", "doParallel", "dplyr", "DT", "e1071", "ellipse", "expm", "fansi", "fastmap", "fdrtool", "ff", "fields", "forcats", "foreach", "foreign", "Formula", "fs", "gdistance", "geiger", "GGally", "ggforce", "ggplot2", "ggraph", "ggrepel", "gh", "git2r", "glmulti", "graphlayouts", "haplo.stats", "HardyWeinberg", "haven", "here", "hierfstat", "Hmisc", "hms", "htmlTable", "htmltools", "htmlwidgets", "httpuv", "httr", "igraph", "inline", "isoband", "iterators", "jsonlite", "KernSmooth", "knitr", "labeling", "later", "lavaan", "leaflet", "loo", "magick", "maptools", "Matrix", "matrixStats", "memoise", "mice", "mnormt", "multcomp", "mvtnorm", "nlme", "nnet", "oce", "ocedata", "openssl", "pbapply", "pca3d", "pegas", "phytools", "pillar", "pinfsc50", "pixmap", "pkgbuild", "pkgload", "plotrix", "poppr", "processx", "promises", "ps", "psych", "qgraph", "quantreg", "R.methodsS3", "R.oo", "R.utils", "R6", "raster", "RcppArmadillo", "RcppEigen", "readr", "rehh", "remotes", "reprex", "rgbif", "rgdal", "rgeos", "rgl", "rJava", "rms", "robustbase", "roxygen2", "rprojroot", "rstan", "rstantools", "rstudioapi", "rversions", "rvest", "sandwich", "segmented", "seqinr", "sf", "shiny", "SNPassoc", "sp", "spam", "spatial", "spData", "spdep", "StanHeaders", "sys", "testthat", "tibble", "tidyr", "tinytex", "units", "usethis", "vcfR", "vctrs", "vegan", "withr", "XML"))
install.packages(c("ade4", "ape", "backports", "BDgraph", "BH", "bit", "boot", "broom", "calibrate", "callr", "class", "cli", "clipr", "clusterGeneration", "coda", "codetools", "colorspace", "covr", "crayon", "crosstalk", "crul", "dartR", "data.table", "DBI", "dbplyr", "deldir", "devtools", "digest", "directlabels", "dismo", "doParallel", "dplyr", "DT", "e1071", "ellipse", "expm", "fansi", "fastmap", "fdrtool", "ff", "fields", "forcats", "foreach", "foreign", "Formula", "fs", "gdistance", "geiger", "GGally", "ggforce", "ggplot2", "ggraph", "ggrepel", "gh", "git2r", "glmulti", "graphlayouts", "haplo.stats", "HardyWeinberg", "haven", "here", "hierfstat", "Hmisc", "hms", "htmlTable", "htmltools", "htmlwidgets", "httpuv", "httr", "igraph", "inline", "isoband", "iterators", "jsonlite", "KernSmooth", "knitr", "labeling", "later", "lavaan", "leaflet", "loo", "magick", "maptools", "Matrix", "matrixStats", "memoise", "mice", "mnormt", "multcomp", "mvtnorm", "nlme", "nnet", "oce", "ocedata", "openssl", "pbapply", "pca3d", "pegas", "phytools", "pillar", "pinfsc50", "pixmap", "pkgbuild", "pkgload", "plotrix", "poppr", "processx", "promises", "ps", "psych", "qgraph", "quantreg", "R.methodsS3", "R.oo", "R.utils", "R6", "raster", "RcppArmadillo", "RcppEigen", "readr", "rehh", "remotes", "reprex", "rgbif", "rgdal", "rgeos", "rgl", "rJava", "rms", "robustbase", "roxygen2", "rprojroot", "rstan", "rstantools", "rstudioapi", "rversions", "rvest", "sandwich", "segmented", "seqinr", "sf", "shiny", "SNPassoc", "sp", "spam", "spatial", "spData", "spdep", "StanHeaders", "sys", "testthat", "tibble", "tidyr", "tinytex", "units", "usethis", "vcfR", "vctrs", "vegan", "withr", "XML"))
install.packages(c("ade4", "ape", "backports", "BDgraph", "BH", "bit", "boot", "broom", "calibrate", "callr", "class", "cli", "clipr", "clusterGeneration", "coda", "codetools", "colorspace", "covr", "crayon", "crosstalk", "crul", "dartR", "data.table", "DBI", "dbplyr", "deldir", "devtools", "digest", "directlabels", "dismo", "doParallel", "dplyr", "DT", "e1071", "ellipse", "expm", "fansi", "fastmap", "fdrtool", "ff", "fields", "forcats", "foreach", "foreign", "Formula", "fs", "gdistance", "geiger", "GGally", "ggforce", "ggplot2", "ggraph", "ggrepel", "gh", "git2r", "glmulti", "graphlayouts", "haplo.stats", "HardyWeinberg", "haven", "here", "hierfstat", "Hmisc", "hms", "htmlTable", "htmltools", "htmlwidgets", "httpuv", "httr", "igraph", "inline", "isoband", "iterators", "jsonlite", "KernSmooth", "knitr", "labeling", "later", "lavaan", "leaflet", "loo", "magick", "maptools", "Matrix", "matrixStats", "memoise", "mice", "mnormt", "multcomp", "mvtnorm", "nlme", "nnet", "oce", "ocedata", "openssl", "pbapply", "pca3d", "pegas", "phytools", "pillar", "pinfsc50", "pixmap", "pkgbuild", "pkgload", "plotrix", "poppr", "processx", "promises", "ps", "psych", "qgraph", "quantreg", "R.methodsS3", "R.oo", "R.utils", "R6", "raster", "RcppArmadillo", "RcppEigen", "readr", "rehh", "remotes", "reprex", "rgbif", "rgdal", "rgeos", "rgl", "rJava", "rms", "robustbase", "roxygen2", "rprojroot", "rstan", "rstantools", "rstudioapi", "rversions", "rvest", "sandwich", "segmented", "seqinr", "sf", "shiny", "SNPassoc", "sp", "spam", "spatial", "spData", "spdep", "StanHeaders", "sys", "testthat", "tibble", "tidyr", "tinytex", "units", "usethis", "vcfR", "vctrs", "vegan", "withr", "XML"))
install.packages(c("ade4", "ape", "backports", "BDgraph", "BH", "bit", "boot", "broom", "calibrate", "callr", "class", "cli", "clipr", "clusterGeneration", "coda", "codetools", "colorspace", "covr", "crayon", "crosstalk", "crul", "dartR", "data.table", "DBI", "dbplyr", "deldir", "devtools", "digest", "directlabels", "dismo", "doParallel", "dplyr", "DT", "e1071", "ellipse", "expm", "fansi", "fastmap", "fdrtool", "ff", "fields", "forcats", "foreach", "foreign", "Formula", "fs", "gdistance", "geiger", "GGally", "ggforce", "ggplot2", "ggraph", "ggrepel", "gh", "git2r", "glmulti", "graphlayouts", "haplo.stats", "HardyWeinberg", "haven", "here", "hierfstat", "Hmisc", "hms", "htmlTable", "htmltools", "htmlwidgets", "httpuv", "httr", "igraph", "inline", "isoband", "iterators", "jsonlite", "KernSmooth", "knitr", "labeling", "later", "lavaan", "leaflet", "loo", "magick", "maptools", "Matrix", "matrixStats", "memoise", "mice", "mnormt", "multcomp", "mvtnorm", "nlme", "nnet", "oce", "ocedata", "openssl", "pbapply", "pca3d", "pegas", "phytools", "pillar", "pinfsc50", "pixmap", "pkgbuild", "pkgload", "plotrix", "poppr", "processx", "promises", "ps", "psych", "qgraph", "quantreg", "R.methodsS3", "R.oo", "R.utils", "R6", "raster", "RcppArmadillo", "RcppEigen", "readr", "rehh", "remotes", "reprex", "rgbif", "rgdal", "rgeos", "rgl", "rJava", "rms", "robustbase", "roxygen2", "rprojroot", "rstan", "rstantools", "rstudioapi", "rversions", "rvest", "sandwich", "segmented", "seqinr", "sf", "shiny", "SNPassoc", "sp", "spam", "spatial", "spData", "spdep", "StanHeaders", "sys", "testthat", "tibble", "tidyr", "tinytex", "units", "usethis", "vcfR", "vctrs", "vegan", "withr", "XML"))
install.packages("magrittr")
install.packages("magrittr")
knitr::opts_chunk$set(echo = TRUE)
library(adegenet)
library(poppr)
library(pegas)
library(hierfstat)
library(diveRsity)
setwd("~/Dropbox/ExportedGenindFilesfromAdegent")
obj.dartK = snmf("~/Dropbox/ExportedGenindFilesfromAdegent/dartstruc9530.geno", K = 1:6, ploidy = 2, entropy = T, repetitions=15,project = "new")
source("http://membres-timc.imag.fr/Olivier.Francois/Conversion.R")
source("http://membres-timc.imag.fr/Olivier.Francois/POPSutilities.R")
#install.packages("~/Downloads/LEA_3.0.0-2.tar", repos = NULL, type ="source")
library("LEA")
library("fields","RColorBrewer","mapplots")
obj.dartK = snmf("~/Dropbox/ExportedGenindFilesfromAdegent/dartstruc9530.geno", K = 1:6, ploidy = 2, entropy = T, repetitions=15,project = "new")
plot(obj.dartK, col = "blue4", cex = 1.4, pch = 19) #STILL suggests 2 and 3 very similar and maybe even stronger for K3, each far better than other values, but the conStruct will save the day
obj.dart4<-snmf("~/Dropbox/ExportedGenindFilesfromAdegent/dartstruc9530.geno", K=4,alpha=50,project="new")
qmatrix.dart4<-Q(obj.dart4)
#pdf("BalK2snmf.pdf")
barplot(t(qmatrix.dart4),col=c("darkblue","lightblue","green","yellow"))
t(qmatrix.dart4)
qmatrix.dart4
obj.dart4
dart1 <- read.genepop("NewStacksFiltered_Gen_Files/populationsNAP25Hap.snps.gen")
dart2 <- read.genepop("NewStacksFiltered_Gen_Files/populationsNAP25Arand.snps.gen")
dart3 <- read.genepop("NewStacksFiltered_Gen_Files/populationsNAP28rand.snps.gen")
dart4 <- read.genepop("NewStacksFiltered_Gen_Files/populationsNAP28Fhap.snps.gen")
dartL1<-missingno(dart1, type="loci", cutoff=0.5)
dartL2<-missingno(dart2, type="loci", cutoff=0.5)
dartL3<-missingno(dart3, type="loci", cutoff=0.5)
dartL4<-missingno(dart4, type="loci", cutoff=0.5)
dartL1
dartL2
dartL2
dartL3
dartL4
dartLF1<-missingno(dartL1, type="geno", cutoff=0.75)
dartLF2<-missingno(dartL2, type="geno", cutoff=0.75)
dartLF3<-missingno(dartL3, type="geno", cutoff=0.75)
dartLF4<-missingno(dartL4, type="geno", cutoff=0.75)
dartLF1
dartLF2
dartLF3
dartLF4
dartLF1_90<-missingno(dartL1, type="geno", cutoff=0.9) #63indiv
dartLF2_90<-missingno(dartL2, type="geno", cutoff=0.9) #63indiv
dartLF3_90<-missingno(dartL3, type="geno", cutoff=0.9) #51 indiv
dartLF4_90<-missingno(dartL4, type="geno", cutoff=0.9) #51 indiv
dartLF1_90
dartLF2_90
dartLF3_90
dartLF4_90
dartLF1_95<-missingno(dartL1, type="geno", cutoff=0.95) #70indiv
dartLF2_95<-missingno(dartL2, type="geno", cutoff=0.95) #70indiv
dartLF3_95<-missingno(dartL3, type="geno", cutoff=0.95) #51 indiv
dartLF4_95<-missingno(dartL4, type="geno", cutoff=0.95) #52 indiv
dartLF1_95@pop
dartLF2_95@pop
dartLF3_95@pop
dartLF4_95@pop
dartL1_3<-missingno(dart1, type="loci", cutoff=0.3) #36495
dartL2_3<-missingno(dart2, type="loci", cutoff=0.3) #7228
dartL3_3<-missingno(dart3, type="loci", cutoff=0.3) #397
dartL4_3<-missingno(dart4, type="loci", cutoff=0.) #1753
dartL1_3
dartL2_3
dartL3_3
dartL4_3
dartL4_3<-missingno(dart4, type="loci", cutoff=0.3) #zip city
dartL4_3
dartL1_3_90<-missingno(dartL1_3, type="geno", cutoff=0.9) #4182
dartL2_3_90<-missingno(dartL2_3, type="geno", cutoff=0.9) #753
dartL3_3_90<-missingno(dartL3_3, type="geno", cutoff=0.9) #87 indivs 15 loci
dartL4_3_90<-missingno(dartL4_3, type="geno", cutoff=0.9) #zip city
dartL1_3_95<-missingno(dartL1_3, type="geno", cutoff=0.95) #4182
dartL2_3_95<-missingno(dartL2_3, type="geno", cutoff=0.95) #753
dartL3_3_95<-missingno(dartL3_3, type="geno", cutoff=0.95) #87 indivs 15 loci
dartL4_3_95<-missingno(dartL4_3, type="geno", cutoff=0.95) #zip city
dartL1_3_95@pop
dartL2_3_95@pop
dartL3_3_95@pop
dartL4_3_95@pop
dartL1_3_95
dartL2_3_95
dartL3_3_95
dartL4_3_95
genind2structure(dartL1_3_95, file="dartL1_3_95.stru",pops=TRUE)
genind2structure <- function(obj, file="", pops=FALSE){
if(!"genind" %in% class(obj)){
warning("Function was designed for genind objects.")
}
# get the max ploidy of the dataset
pl <- max(obj@ploidy)
# get the number of individuals
S <- adegenet::nInd(obj)
# column of individual names to write; set up data.frame
tab <- data.frame(ind=rep(indNames(obj), each=pl))
# column of pop ids to write
if(pops){
popnums <- 1:adegenet::nPop(obj)
names(popnums) <- as.character(unique(adegenet::pop(obj)))
popcol <- rep(popnums[as.character(adegenet::pop(obj))], each=pl)
tab <- cbind(tab, data.frame(pop=popcol))
}
loci <- adegenet::locNames(obj)
# add columns for genotypes
tab <- cbind(tab, matrix(-9, nrow=dim(tab)[1], ncol=adegenet::nLoc(obj),
dimnames=list(NULL,loci)))
# begin going through loci
for(L in loci){
thesegen <- obj@tab[,grep(paste("^", L, "\\.", sep=""),
dimnames(obj@tab)[[2]]),
drop = FALSE] # genotypes by locus
al <- 1:dim(thesegen)[2] # numbered alleles
for(s in 1:S){
if(all(!is.na(thesegen[s,]))){
tabrows <- (1:dim(tab)[1])[tab[[1]] == indNames(obj)[s]] # index of rows in output to write to
tabrows <- tabrows[1:sum(thesegen[s,])] # subset if this is lower ploidy than max ploidy
tab[tabrows,L] <- rep(al, times = thesegen[s,])
}
}
}
# export table
write.table(tab, file=file, sep="\t", quote=FALSE, row.names=FALSE)
}
genind2structure(dartL1_3_95, file="dartL1_3_95.stru",pops=TRUE)
genind2structure(dartL2_3_95, file="dartL2_3_95.stru",pops=TRUE)
genind2structure(dartL3_3_95, file="dartL3_3_95.stru",pops=TRUE)
genind2structure(dartL4_3_95, file="dartL4_3_95.stru",pops=TRUE)
source("http://membres-timc.imag.fr/Olivier.Francois/Conversion.R")
source("http://membres-timc.imag.fr/Olivier.Francois/POPSutilities.R")
#install.packages("~/Downloads/LEA_3.0.0-2.tar", repos = NULL, type ="source")
library("LEA")
library("fields","RColorBrewer","mapplots")
struct2geno(file="~/Dropbox/ExportedGenindFilesfromAdegent/dart9530.stru", FORMAT=2, extra.col=1,extra.row=1,output="dartL1_3_95.geno")
struct2geno(file="~/Dropbox/ExportedGenindFilesfromAdegent/dartL1_3_95.stru", FORMAT=2, extra.col=1,extra.row=1,output="dartL1_3_95.geno")
struct2geno(file="~/Dropbox/ExportedGenindFilesfromAdegent/dartL2_3_95.stru", FORMAT=2, extra.col=1,extra.row=1,output="dartL2_3_95.geno")
struct2geno(file="~/Dropbox/ExportedGenindFilesfromAdegent/dartL3_3_95.stru", FORMAT=2, extra.col=1,extra.row=1,output="dartL3_3_95.geno")
struct2geno(file="~/Dropbox/ExportedGenindFilesfromAdegent/dartL4_3_95.stru", FORMAT=2, extra.col=1,extra.row=1,output="dartL4_3_95.geno")
obj.dartK1 = snmf("~/Dropbox/ExportedGenindFilesfromAdegent/dartL1_3_95.geno", K = 1:6, ploidy = 2, entropy = T, repetitions=20,project = "new")
obj.dartK2 = snmf("~/Dropbox/ExportedGenindFilesfromAdegent/dartL2_3_95.geno", K = 1:6, ploidy = 2, entropy = T, repetitions=20,project = "new")
obj.dartK3 = snmf("~/Dropbox/ExportedGenindFilesfromAdegent/dartL3_3_95.geno", K = 1:6, ploidy = 2, entropy = T, repetitions=20,project = "new")
obj.dartK4 = snmf("~/Dropbox/ExportedGenindFilesfromAdegent/dartL4_3_95.geno", K = 1:6, ploidy = 2, entropy = T, repetitions=20,project = "new")
plot(obj.dartK1, col = "blue4", cex = 1.4, pch = 19) #STILL suggests 2 and 3 very similar and maybe even stronger for K3, each far better than other values, but the conStruct will save the day
plot(obj.dartK1, col = "blue4", cex = 1.4, pch = 19)
plot(obj.dartK2, col = "blue4", cex = 1.4, pch = 19)
plot(obj.dartK3, col = "blue4", cex = 1.4, pch = 19)
plot(obj.dartK4, col = "blue4", cex = 1.4, pch = 19)
obj.dartK1<-snmf("~/Dropbox/ExportedGenindFilesfromAdegent/dartL1_3_95.geno",K=4,alpha=50,project="new")
obj.dartK2<-snmf("~/Dropbox/ExportedGenindFilesfromAdegent/dartL2_3_95.geno",K=4,alpha=50,project="new")
obj.dartK4<-snmf("~/Dropbox/ExportedGenindFilesfromAdegent/dartL4_3_95.geno",K=4,alpha=50,project="new")
qmatrix.dartK1<-Q(obj.dartK1)
qmatrix.dartK2<-Q(obj.dartK2)
qmatrix.dartK4<-Q(obj.dartK4)
qmatrix.dartK1<-Q(obj.dartK1)
qmatrix.dartK2<-Q(obj.dartK2)
qmatrix.dartK4<-Q(obj.dartK4)
barplot(t(qmatrix.dartK1),col=c("darkblue","lightblue","green","yellow"))
barplot(t(qmatrix.dartK2),col=c("darkblue","lightblue","green","yellow"))
barplot(t(qmatrix.dartK4),col=c("darkblue","lightblue","green","yellow"))
knitr::opts_chunk$set(echo = TRUE)
library(adegenet)
library(poppr)
library(pegas)
library(hierfstat)
library(diveRsity)
pairwise50<-pairwise.neifst(data50)
pairwise50<-pairwise.neifst(newdata50)
knitr::opts_chunk$set(echo = TRUE)
library(adegenet)
library(poppr)
library(pegas)
library(hierfstat)
library(diveRsity)
file3 = "May19.snps.gen"
small_Bg <- read.genepop(file3,ncode=2)
# now no minor alleles less than 0.05 frequency. removed in "Populations" in STACKS
locus50 <- missingno(small_Bg, type="loci", cutoff=0.5) #removes 14 loci
Bg50 <-missingno(locus50, type="geno", cutoff=0.5) #1500 loci, 142 indivs, 10pops
#mapping for Bglandula paper
library("maps")
library("mapproj")
library("mapdata")
data(worldMapEnv)
# all location data here, have re-checked Linda Mar, re-ordered for later analyses
locs<-c("JUN","FHL","MEA","PSG","MEN","BOD","LIN","TPT","HOP","SHB","GOL")
lats<-c(58.3,48.5,45.48,41.7,40.5,38.33,37.61,36.94,36.62,35.16,34.4)
longs<-c(-134.4,-123.01,-123.96,-124.25,-124.41,-123.04,-122.48,-122.06,-121.904,-120.69,-119.84)
locpoints<-cbind(longs,lats)
# for plotting labels
rightlats<-lats[-c(1,8)]
rightlongs<-longs[-c(1,8)]
rightlocs<-locs[-c(1,8)]
leftlats<-lats[c(1,8)]
leftlongs<-longs[c(1,8)]
leftlocs<-locs[c(1,8)]
PSGlats<-lats[c(4)]
PSGlongs<-longs[c(4)]
PSG<-cbind(PSGlongs,PSGlats)
#pdf("MapFig1.pdf")
m0 <- maps::map(database = "world", plot = TRUE, fill=FALSE, xlim = c(-140,-118), ylim = c(30,60),lforce="n")
points(locpoints,cex=2,pch=24,col="darkblue",bg="steelblue",xlab="longitude",ylab="latitude")
#points(PSG,cex=2,pch=17,col="black")
#points(PSG,cex=3,pch=4,col="black")
text(rightlongs,rightlats,rightlocs,pos=2,offset=1.5,cex=1)
text(leftlongs,leftlats,leftlocs,pos=4,offset=1,cex=1)
#dev.off()
# here we play with Fis and Fst as needed to figure out ways to fix the data just a bit earlier
data50<-genind2hierfstat(Bg50)
#library(hierfstat)
basic50<-basic.stats(data50)
hist(basic50$Fis)
Fiscut25<-read.table("FisWhitelist25.txt",as.is = TRUE)
Fiscut25<-as.vector(Fiscut25)
Bg50cut25<-Bg50[,loc = Fiscut25$V1 ]
Bg50<-Bg50cut25
newdata50<-genind2hierfstat(Bg50)
#library(hierfstat)
newbasic50<-basic.stats(newdata50)
hist(newbasic50$Fis)
pairwise50<-pairwise.neifst(newdata50)
pairwise50
mypops<-popsub(newdata50)
mypops<-popsub(Bg50)
mypops
mypops@pop
myclusters<-find.clusters(mypops,n.pca=50,n.clust=3)
myclusters
find.clusters(mypops)
find.clusters(mypops)
find.clusters(mypops)
dapcv1<-dapc(Bg50,var.contrib=TRUE,scale=FALSE,n.pca=50,n.da=2,truenames=FALSE)
scat_dapcv1<-scatter(dapcv1,cell=0,pch=18:23,cstar=0,mstree=FALSE,lwd=2,lty=2) #okwhewanswerissimilar
scat_dapcv1_1d<-scatter(dapcv1,1,1,scree.da=FALSE, legend=TRUE, solid=.4,bg="white")
scat_dapcv1<-scatter(dapcv1,cell=0,pch=18:23,cstar=0,mstree=FALSE,lwd=2,lty=2) #okwhewanswerissimilar
#1 genind2structure.R by Lindsay Clark https://github.com/lvclark/R_genetics_conv/blob/master/genind2structure.R
# Function to export to STRUCTURE format from genind object.
# genind objects are created in the R package adegenet.  The function below is an R function.
# Lindsay V. Clark, 26 July 2015
# obj: genind object
# file: file name to write
# pops: whether to include population info in the file
# Function is flexible with regards to ploidy, although genotypes are
# considered to be unambiguous.
# Missing data must be recorded as NA in obj@tab.
# example use:
# data(nancycats)
# genind2structure(nancycats, file="nancy_structure.txt", pops=TRUE)
genind2structure <- function(obj, file="", pops=FALSE){
if(!"genind" %in% class(obj)){
warning("Function was designed for genind objects.")
}
# get the max ploidy of the dataset
pl <- max(obj@ploidy)
# get the number of individuals
S <- adegenet::nInd(obj)
# column of individual names to write; set up data.frame
tab <- data.frame(ind=rep(indNames(obj), each=pl))
# column of pop ids to write
if(pops){
popnums <- 1:adegenet::nPop(obj)
names(popnums) <- as.character(unique(adegenet::pop(obj)))
popcol <- rep(popnums[as.character(adegenet::pop(obj))], each=pl)
tab <- cbind(tab, data.frame(pop=popcol))
}
loci <- adegenet::locNames(obj)
# add columns for genotypes
tab <- cbind(tab, matrix(-9, nrow=dim(tab)[1], ncol=adegenet::nLoc(obj),
dimnames=list(NULL,loci)))
# begin going through loci
for(L in loci){
thesegen <- obj@tab[,grep(paste("^", L, "\\.", sep=""),
dimnames(obj@tab)[[2]]),
drop = FALSE] # genotypes by locus
al <- 1:dim(thesegen)[2] # numbered alleles
for(s in 1:S){
if(all(!is.na(thesegen[s,]))){
tabrows <- (1:dim(tab)[1])[tab[[1]] == indNames(obj)[s]] # index of rows in output to write to
tabrows <- tabrows[1:sum(thesegen[s,])] # subset if this is lower ploidy than max ploidy
tab[tabrows,L] <- rep(al, times = thesegen[s,])
}
}
}
# export table
write.table(tab, file=file, sep="\t", quote=FALSE, row.names=FALSE)
}
#2. take the current genind object and convert
genind2structure(Bg50,file="Bg50v2.stru",pops=TRUE) #it is written to the directory
#Bgstruc<-read.structure("Bg50.stru")
# this is the R approximation to Structure and seems to get a lot of support from the "landscape ecology" crowd.
#install.packages(c("fields","RColorBrewer","mapplots"))
#BiocManager::install("LEA")
#library("LEA")
source("http://membres-timc.imag.fr/Olivier.Francois/Conversion.R")
source("http://membres-timc.imag.fr/Olivier.Francois/POPSutilities.R")
#install.packages("~/Downloads/LEA_3.0.0-2.tar", repos = NULL, type ="source")
library("LEA")
library("fields","RColorBrewer","mapplots")
struct2geno(file="~/Dropbox/BgRadness/Bg50v2.stru", FORMAT=2, extra.col=1,extra.row=1,output="balstruc.geno")
obj.balK = snmf("~/Dropbox/BgRadness/balstruc.geno", K = 1:10, ploidy = 2, entropy = T, repetitions=20,project = "new")
plot(obj.balK, col = "blue4", cex = 1.4, pch = 19) #so... how many "populations" exist here according to this approach?
obj.bal2<-snmf("~/Dropbox/BgRadness/balstruc.geno", K=2,alpha=50,project="new")
qmatrix.bal2<-Q(obj.bal2)
barplot(t(qmatrix.bal2),col=c("darkblue","lightblue"))
obj.bal3<-snmf("~/Dropbox/BgRadness/balstruc.geno", K=3,alpha=50,project="new")
qmatrix.bal3<-Q(obj.bal3)
barplot(t(qmatrix.bal3),col=c("darkblue","lightblue","green"))
obj.bal5<-snmf("~/Dropbox/BgRadness/balstruc.geno", K=5,alpha=50,project="new")
qmatrix.bal5<-Q(obj.bal5)
barplot(t(qmatrix.bal5),col=c("darkblue","lightblue","green","yellow","pink"))
obj.bal2<-snmf("~/Dropbox/BgRadness/balstruc.geno", K=2,alpha=50,project="new")
qmatrix.bal2<-Q(obj.bal2)
barplot(t(qmatrix.bal2),col=c("darkblue","lightblue"))
obj.bal3<-snmf("~/Dropbox/BgRadness/balstruc.geno", K=3,alpha=50,project="new")
qmatrix.bal3<-Q(obj.bal3)
barplot(t(qmatrix.bal3),col=c("darkblue","lightblue","green"))
obj.bal5<-snmf("~/Dropbox/BgRadness/balstruc.geno", K=5,alpha=50,project="new")
qmatrix.bal5<-Q(obj.bal5)
barplot(t(qmatrix.bal5),col=c("darkblue","lightblue","green","yellow","pink"))
knitr::opts_chunk$set(echo = TRUE)
library(adegenet)
library(poppr)
library(pegas)
library(hierfstat)
library(diveRsity)
setwd("~/Dropbox/ExportedGenindFilesfromAdegent")
struct2geno(file="~/Dropbox/ExportedGenindFilesfromAdegent/bassL1_3_95.stru", FORMAT=2, extra.col=1,extra.row=1,output="bassL1_3_95.geno")
shinyAppFile("/Users/johnwares/Dropbox/MolEcolText/shiny_popgen-master/STRUCTURE/structure.R",options=list(width="100%",height=600))
library(knitr)
knitr::opts_chunk$set(echo = TRUE)
library(here)
#setwd("~/Dropbox/MolEcolText") #nb path is distinct between machines so figures etc. won't load at home right now
#here::here() #hoping to make this more portable
# students should make these lines active to install packages that they may need.
#get package names
pckgs <- c("tidyverse", "shiny", "wesanderson","devtools","learnPopGen")
#determine if packages are installed already
miss <- pckgs[!pckgs %in% installed.packages()]
#install missing packages
if(length(miss)) install.packages(miss, dependencies = TRUE)
# going to try shiny_popgen but not sure how to include in Rmd yet...
#install.packages("devtools")
devtools::install_github("hadley/emo")
library(ggplot2)
shinyAppFile("/Users/johnwares/Dropbox/MolEcolText/shiny_popgen-master/Drift/drift_app.R",options=list(width="100%",height=700))
knitr::opts_chunk$set(echo = TRUE)
library(adegenet)
library(poppr)
library(pegas)
library(hierfstat)
library(diveRsity)
setwd("~/Dropbox/BgRadness")
#mapping for Bglandula paper
library("maps")
library("mapproj")
library("mapdata")
data(worldMapEnv)
# all location data here, have re-checked Linda Mar, re-ordered for later analyses
locs<-c("JUN","FHL","MEA","PSG","MEN","BOD","LIN","TPT","HOP","SHB","GOL")
lats<-c(58.3,48.5,45.48,41.7,40.5,38.33,37.61,36.94,36.62,35.16,34.4)
longs<-c(-134.4,-123.01,-123.96,-124.25,-124.41,-123.04,-122.48,-122.06,-121.904,-120.69,-119.84)
# for plotting labels
rightlats<-lats[-c(1,8)]
rightlongs<-longs[-c(1,8)]
rightlocs<-locs[-c(1,8)]
leftlats<-lats[c(1,8)]
leftlongs<-longs[c(1,8)]
leftlocs<-locs[c(1,8)]
PSGlats<-lats[c(4)]
PSGlongs<-longs[c(4)]
PSG<-cbind(PSGlongs,PSGlats)
# making the map, could tweak colors etc
locpoints<-cbind(longs,lats)
pdf("MapFig1.pdf")
plot(locpoints,cex=3,pch=24,col="darkblue",bg="steelblue",xlab="longitude",ylab="latitude",asp=1.05)
points(PSG,cex=3,pch=17,col="black")
#points(PSG,cex=3,pch=4,col="black")
text(rightlongs,rightlats,rightlocs,pos=2,offset=1,cex=1.5)
text(leftlongs,leftlats,leftlocs,pos=4,offset=1,cex=1.5)
m0 <- maps::map(database = "world", plot = TRUE, fill=FALSE, xlim = c(-140,-118), ylim = c(30,60),lforce="n",add=TRUE)
dev.off()
pdf("MapFig1.pdf")
m0 <- maps::map(database = "world", plot = TRUE, fill=FALSE, xlim = c(-140,-118), ylim = c(30,60),lforce="n")
points(locpoints,cex=2,pch=24,col="darkblue",bg="steelblue",xlab="longitude",ylab="latitude")
points(PSG,cex=2,pch=17,col="black")
#points(PSG,cex=3,pch=4,col="black")
text(rightlongs,rightlats,rightlocs,pos=2,offset=1.5,cex=1)
text(leftlongs,leftlats,leftlocs,pos=4,offset=1,cex=1)
dev.off()
# this is for exploring and documenting the effect of different filtering types (and combos)
file3 = "May19.snps.gen"
small_Bg <- read.genepop(file3,ncode=2) #now 3rd time through: 1519 loci. OK not so bad as I feared.
# now no minor alleles less than 0.05 frequency. removed in "Populations" in STACKS
best95 <- missingno(small_Bg, type= "geno", cutoff = 0.95) #removes 18 individuals
best80 <- missingno(small_Bg, type="geno", cutoff=0.8) #removes 19 individuals
best50 <- missingno(small_Bg, type="geno", cutoff=0.5) #rewmoves 33 individuals
best20 <- missingno(small_Bg, type="geno", cutoff=0.2) #removes 68 individuals still 9 locations
best10 <- missingno(small_Bg, type="geno", cutoff=0.1) #removes ALL no go
locus95 <- missingno(small_Bg, type="loci", cutoff=0.95) #removes no loci
locus50 <- missingno(small_Bg, type="loci", cutoff=0.5) #removes 14 loci
locus20 <- missingno(small_Bg, type="loci", cutoff=0.2) #leaves only 172 loci
Bg95<- missingno(locus50, type="geno",cutoff=0.95) #1500 loci, 157 indivs
Bg80<- missingno(locus50, type="geno", cutoff=0.8) #1500 loci, 156 indivs
Bg50 <-missingno(locus50, type="geno", cutoff=0.5) #1500 loci, 142 indivs, 10pops
Bg25 <- missingno(locus50, type="geno", cutoff=0.25) #1500 loci, 114 indivs, 9 pops no PSG, or GOL
hyper2520<-missingno(best20,type="loci",cutoff=0.25) # still 1251 loci, 107 indivs, 8 locations
#FOR NOW go forward with Bg50 as before....
coast50<-popsub(Bg50)
find.clusters(coast50)
find.clusters(coast50)
setwd("~/GitHub/molecoltext")
setwd("~/GitHub/molecoltext")
knitr::include_graphics("MEImages/IMG_1549.jpeg")
setwd("~/GitHub/molecoltext")
library(learnPopGen)
driftplot<-drift.selection(p0=0.25,Ne=500,w=c(1,1,1),ngen=400,nrep=5)
setwd("~/Documents/GitHub/molecoltext")
#setwd("~/GitHub/molecoltext/")
library(knitr)
knitr::opts_chunk$set(echo = TRUE)
#print(getwd())
today<-Sys.Date()
# students should make these lines active to install packages that they may need.
#get package names
pckgs <- c("tidyverse", "shiny", "wesanderson","devtools","learnPopGen")
#determine if packages are installed already
miss <- pckgs[!pckgs %in% installed.packages()]
#install missing packages
if(length(miss)) install.packages(miss, dependencies = TRUE)
# going to try shiny_popgen but not sure how to include in Rmd yet...
#install.packages("devtools")
#devtools::install_github("hadley/emo")
install.packages(miss, dependencies = TRUE)
library(learnPopGen)
driftplot<-drift.selection(p0=0.25,Ne=500,w=c(1,1,1),ngen=400,nrep=5)
dist2<-c(0.0159,0,0.0476,0,0.0635,0.0159,0.0317,0.0159,0.0476,0.0476,0,0.0635,0.0476,0.0476,0.063,0.16,0.17,0.16,0.17,0.17,0.18)
hiscols<-c("darkred","darkred","darkred","darkred","lightblue","lightblue","lightblue","lightblue","lightblue")
hist(dist2,breaks=8,col=hiscols)
setwd("~/Documents/GitHub/molecoltext")
setwd("/Users/john/Documents/GitHub/molecoltext")
setwd("/Users/john/Documents/GitHub/molecoltext/")
setwd("~/Documents/GitHub/molecoltext")
#setwd("~/GitHub/molecoltext/") #don't forget to set working directory yourself
library(knitr)
knitr::opts_chunk$set(echo = TRUE)
print(getwd())
#today<-Sys.Date()
# students should make these lines active to install packages that they may need.
#get package names
pckgs <- c("tidyverse", "shiny", "wesanderson","devtools","learnPopGen")
#determine if packages are installed already
miss <- pckgs[!pckgs %in% installed.packages()]
#install missing packages
if(length(miss)) install.packages(miss, dependencies = TRUE)
# going to try shiny_popgen but not sure how to include in Rmd yet...
#install.packages("devtools")
#devtools::install_github("hadley/emo")
library(tidyverse)
library(shiny)
library(wesanderson)
library(devtools)
library(learnPopGen)
#install.packages("devtools")
#devtools::install_github("hadley/emo")
library(tidyverse)
install(tidyverse)
install.packages(tidyverse)
install.packages("tidyverse")
install.packages("tidyverse")
install.packages("tidyverse")
install.packages("shiny")
install.packages("wesanderson")
install.packages("devtools")
install.packages("learnPopGen")
library(tidyverse)
library(shiny)
library(wesanderson)
library(devtools)
library(learnPopGen)
library(tidyverse)
library(shiny)
library(wesanderson)
library(devtools)
library(learnPopGen)
pwd()
print(getwd())
