# check missing data
# because PLD has more than 20% missing data it should also be eliminated
# see 'trtcov' from previous chunk, remove more data if necessary, above I removed because they are not a fit for PCA yet
# OK but also 8 some things not coded right yet, actually none of the PLD have less thatn 20% missing for now
# also fecundity egg size, reproductive age
#data.df <- data.frame(lapply(data.df,as.numeric))
# missing values and data normalisation I"m not 100% sure how to steer this part
# but it doesn't like NA values so here I am learning some tidyverse stuff
# https://tidyr.tidyverse.org/reference/replace_na.html
data.df%>%replace_na(list(isPlanktonic_atanypoint = 0, Spawning_mode= 0))
#why not working hmm won't work if variable is a factor?
# but isPlankt is numeric
#                       Larval_feeding= 0, Large_Adult_Range= 0,
#                       ReturnToSpawningGround= 0,Body_Size= 0,
#                       Generational_Structure= 0))
# FINE FOR NOW USING BASE REPLACE
data.df[is.na(data.df)] <- 0
# obviously that is not best approach just getting code going again
# so we will next get intentional about fixing some data and deciding on recode of others
# missing values and data normalisation I"m not 100% sure how to steer this part
# OK removing more data because this code is very sensitive
#data.df<-data.df[-c(9,10,12,14)]
data.df$Body_Size<-as.numeric(data.df$Body_Size) # oh that was it maybe so check other excluded above
data.df$Reproductive_Age<-as.numeric(data.df$Reproductive_Age)
data.df$PLD_point<-as.numeric(data.df$PLD_point)
data.df$Fecundity_EggSize<-as.numeric(data.df$Fecundity_EggSize)
# missing values and data normalisation I"m not 100% sure how to steer this part
new.df <- pca.mvreplace(
data.df,
center = TRUE,
scale = TRUE,
maxncomp = 5, # the original value was 15 which is too high.
# I checked the scree plot below,
# and I think the number of PC could be 3 or 5
expvarlim = 0.95,
covlim = 10^-6,
maxiter = 100
)
knitr::opts_chunk$set(echo = TRUE)
#idea: calculate and explore trait coverage - by trait and by species
#load libraries
library(dplyr)
library(tidyr)
library(ggplot2)
library(googledrive)
library(googlesheets4)
rm(list = ls())
gc()
#**********************************************
# get trait data --------
df <- googledrive::drive_ls(path = "working_datasheets", pattern = "working_list_marine_projects_with_10indivs-12-4-2020")
df <- googlesheets4::range_read(df, sheet = 1) %>% as.data.frame() %>% mutate(run_name = paste("bioprj_",link,sep=""))
df.raw <- df %>% filter(grepl("yes|Yes",keepinrunning_YN))
df <- df.raw %>% dplyr::select(organism_biosamp, somePopsFWorBrackish, isInvasiveRange, isMaybeHybrid,
DiffbyDepthSuspected, isAdultBenthicMarine, isNektonSometimes, PLD_point, PLD_minmax,
isPlanktonic_atanypoint, Spawning_mode, Larval_feeding,
Large_Adult_Range, ReturnToSpawningGround, Spawnlocation,
Fecundity_EggsFemaleSpawn, Fecundity_SpawnFrequency, Fecundity_EggSize,
Body_Size, Reproductive_Age, Longevity, Generational_Structure,
Asexual_Stage, Human_Interactions_economic, Census_Size,
Genome_Size_MB, Genome_Size_picoGrams)
#remove duplicate species
df <- df %>% distinct()
#replace values that aren't actually data with true NAs - NULL, ?, TBD, NA
df <- df %>% mutate(across(everything(), gsub, pattern = "NULL", replacement = NA)) %>%
mutate(across(everything(), gsub, pattern = "NA", replacement = NA)) %>%
mutate(across(everything(), gsub, pattern = "\\?", replacement = NA)) %>%
mutate(across(everything(), gsub, pattern = "TBD", replacement = NA))
#check if there are any species with non-identical info
#should return 0 if no duplicates
df %>% group_by(organism_biosamp) %>% mutate(nonid = 1:n()) %>% filter(nonid > 1) %>% nrow()
#optional, remove some species by name
#see all the species
df$organism_biosamp
#pick some to drop
#John's quickie way of compare/contrast:
#sp_to_drop = c() #uncomment this and comment the below to toggle between
#this subset of 8 taxa improves Fecundity_eggsize to >80% from about 76%, improves PLD_minmax and point by 5%
sp_to_drop = c("Sargassum muticum", "Eudyptes chrysolophus", "Planes minutus", "Laguncularia racemosa", "Exaiptasia pallida", "Exaiptasia brasiliensis", "Porites", "Eukrohnia hamata")
#remove them for rest of this code
df <- df %>% filter(!organism_biosamp %in% sp_to_drop)
#end optional species filtering adventure
#**********************************************
# convert/clean up for PCA --------------
#build separate PLD min and max columns
df <- df %>% separate(., PLD_minmax, into = c("PLDmin", "PLDmax"), sep = "–", remove = F) %>%
mutate(PLDmin = as.numeric(PLDmin), PLDmax = as.numeric(PLDmax)) %>%
mutate(PLDmidpoint = (PLDmin + PLDmax)/2)
df %>% dplyr::select(organism_biosamp,PLD_minmax, PLDmin, PLDmax, PLDmidpoint, PLD_point) %>% View()
#df %>% ggplot(aes(x = PLDmidpoint, y = PLD_point)) + geom_point() + geom_smooth(formula = y~x, method = "lm")
#convert F/T vars to 0/1
df <- df %>% mutate(Large_Adult_Range = as.numeric(plyr::revalue(Large_Adult_Range, c("T" = 1, "F" = 0))),
isPlanktonic_atanypoint = as.numeric(plyr::revalue(isPlanktonic_atanypoint, c("T" = 1, "F" = 0))),
isNektonSometimes = as.numeric(plyr::revalue(isNektonSometimes, c("T" = 1, "F" = 0))),
isAdultBenthicMarine = as.numeric(plyr::revalue(isAdultBenthicMarine, c("T" = 1, "F" = 0))),
DiffbyDepthSuspected = as.numeric(plyr::revalue(DiffbyDepthSuspected, c("T" = 1, "F" = 0))),
isMaybeHybrid = as.numeric(plyr::revalue(isMaybeHybrid, c("T" = 1, "F" = 0))),
isInvasiveRange = as.numeric(plyr::revalue(isInvasiveRange, c("T" = 1, "F" = 0))),
somePopsFWorBrackish = as.numeric(plyr::revalue(somePopsFWorBrackish, c("T" = 1, "F" = 0))))
#convert multicat vars to numberic
df <- df %>% mutate(Spawning_mode = as.numeric(plyr::revalue(Spawning_mode, c("F" = 1, "I" = 2, "N" = 3))),
Generational_Structure= as.numeric(plyr::revalue(Generational_Structure, c("I" = 1, "S"=2))),
Larval_feeding= as.numeric(plyr::revalue(Larval_feeding, c("F" = 1, "L"=2, "N"=3,"P"=4,"P*"=5,"T"=4))),
ReturnToSpawningGround= as.numeric(plyr::revalue(ReturnToSpawningGround, c("F" = 1, "maybe"=2, "T"=2,"Y"=2))))
# **** note I jyst recoded T as same as P to get things running we need to recode in dataset
# *** also maybe, T, Y coded the same in Return to spawning ground
#convert cols with point values (likely mean) and ranges to all point values
df <- df %>%
rename("Body_Size.og" = "Body_Size") %>%
separate(., Body_Size.og, into = c("min", "max"), sep = "–", remove = F) %>%
mutate(min = as.numeric(min), max = as.numeric(max)) %>%
mutate(Body_Size = (min + max)/2) %>%
mutate(Body_Size = ifelse(is.na(Body_Size)==T, Body_Size.og, Body_Size)) %>%
rename("Longevity.og" = "Longevity") %>%
separate(., Longevity.og, into = c("min", "max"), sep = "–", remove = F) %>%
mutate(min = as.numeric(min), max = as.numeric(max)) %>%
mutate(Longevity = (min + max)/2) %>%
mutate(Longevity = ifelse(is.na(Longevity)==T, Longevity.og, Longevity)) %>%
rename("Reproductive_Age.og" = "Reproductive_Age") %>%
separate(., Reproductive_Age.og, into = c("min", "max"), sep = "–", remove = F) %>%
mutate(min = as.numeric(min), max = as.numeric(max)) %>%
mutate(Reproductive_Age = (min + max)/2) %>%
mutate(Reproductive_Age = ifelse(is.na(Reproductive_Age)==T, Reproductive_Age.og, Reproductive_Age)) %>%
rename("Fecundity_EggSize.og" = "Fecundity_EggSize") %>%
separate(., Fecundity_EggSize.og, into = c("min", "max"), sep = "–", remove = F) %>%
mutate(min = as.numeric(min), max = as.numeric(max)) %>%
mutate(Fecundity_EggSize = (min + max)/2) %>%
mutate(Fecundity_EggSize = ifelse(is.na(Fecundity_EggSize)==T, Fecundity_EggSize.og, Fecundity_EggSize)) %>%
rename("Fecundity_EggsFemaleSpawn.og" = "Fecundity_EggsFemaleSpawn") %>%
separate(., Fecundity_EggsFemaleSpawn.og, into = c("min", "max"), sep = "–", remove = F) %>%
mutate(min = as.numeric(min), max = as.numeric(max)) %>%
mutate(Fecundity_EggsFemaleSpawn = (min + max)/2) %>%
mutate(Fecundity_EggsFemaleSpawn = ifelse(is.na(Fecundity_EggsFemaleSpawn)==T, Fecundity_EggsFemaleSpawn.og, Fecundity_EggsFemaleSpawn)) %>%
dplyr::select(organism_biosamp, somePopsFWorBrackish, isInvasiveRange,
isMaybeHybrid, DiffbyDepthSuspected, isAdultBenthicMarine, isNektonSometimes,
PLD_point, PLD_minmax, PLDmin, PLDmax, PLDmidpoint,
isPlanktonic_atanypoint, Spawning_mode, Larval_feeding,
Large_Adult_Range, ReturnToSpawningGround, Spawnlocation,
Fecundity_EggsFemaleSpawn, Fecundity_SpawnFrequency, Fecundity_EggSize,
Body_Size, Reproductive_Age, Longevity, Generational_Structure,
Asexual_Stage, Human_Interactions_economic, Census_Size,
Genome_Size_MB, Genome_Size_picoGrams)
#check where we are at with coding of variables
for ( trait in names(df) ) {
print(df %>% group_by(!!as.symbol(trait)) %>% summarise(n=n()))
}
#and/or view df and sort on various columns
df %>% View()
#**********************************************
# calculate trait and species coverage ------
#trait coverage
total = nrow(df)
trtcov <- df %>% dplyr::select(-organism_biosamp) %>%
summarise(across(everything(), ~ ((total - sum(is.na(.x)))/total)*100)) %>%
pivot_longer(., names_to = "trait", values_to = "percentage_coverage", cols = 1:ncol(.)) %>%
mutate(isspecial = ifelse(trait %in% c("PLD_point", "PLD_minmax", "isPlanktonic_atanypoint",
"Spawning_mode", "Fecundity_EggSize",
"Body_Size", "Generational_Structure"),
"green", "additional")) %>%
mutate(isspecial = ifelse(trait %in% c("Fecundity_EggsFemaleSpawn", "Fecundity_SpawnFrequency",
"Reproductive_Age", "Longevity"),
"yellow", isspecial)) %>%
mutate(isspecial = factor(isspecial, levels = c("green", "yellow", "additional")))
#species coverage
spcov.all <- df %>%
rowwise(organism_biosamp) %>% summarise(spcov.all = (((ncol(.)-1) - (sum(is.na(cur_data()))))/(ncol(.)-1))*100) %>% ungroup()
spcov.green <- df %>%
dplyr::select(organism_biosamp, PLD_point, PLD_minmax, isPlanktonic_atanypoint,
Spawning_mode, Fecundity_EggSize, Body_Size, Generational_Structure) %>%
rowwise(organism_biosamp) %>% summarise(spcov.green = (((ncol(.)-1) - (sum(is.na(cur_data()))))/(ncol(.)-1))*100) %>% ungroup()
spcov.yellow <- df %>%
dplyr::select(organism_biosamp, Fecundity_EggsFemaleSpawn, Fecundity_SpawnFrequency, Reproductive_Age, Longevity) %>%
rowwise(organism_biosamp) %>% summarise(spcov.yellow = (((ncol(.)-1) - (sum(is.na(cur_data()))))/(ncol(.)-1))*100) %>% ungroup()
spcov.greenandyellow <- df %>%
dplyr::select(organism_biosamp, PLD_point, PLD_minmax, isPlanktonic_atanypoint,
Spawning_mode, Fecundity_EggSize, Body_Size, Generational_Structure,
Fecundity_EggsFemaleSpawn, Fecundity_SpawnFrequency, Reproductive_Age, Longevity) %>%
rowwise(organism_biosamp) %>% summarise(spcov.greenandyellow = (((ncol(.)-1) - (sum(is.na(cur_data()))))/(ncol(.)-1))*100) %>% ungroup()
spcov <- merge(spcov.all, spcov.green, by = "organism_biosamp", all = T) %>%
merge(., spcov.yellow, by = "organism_biosamp", all = T) %>%
merge(., spcov.greenandyellow, by = "organism_biosamp", all = T)
rm(spcov.all, spcov.green, spcov.greenandyellow, spcov.yellow, total, trait)
#plot
trtcov %>%
arrange(desc(isspecial), desc(trait)) %>% mutate(order = 1:n()) %>%
mutate(trait = reorder(trait, order)) %>%
ggplot() +
geom_hline(yintercept = 50, colour = "red", alpha = 0.5, linetype = "dashed") +
geom_hline(yintercept = 80, colour = "red", alpha = 0.5, linetype = "dashed") +
geom_point(aes(x = trait, y = percentage_coverage, fill = isspecial),
shape = 21, colour = "black", size = 3) +
scale_fill_manual(values = c("green","yellow","black")) +
labs(fill = "Trait priority",
y = "Trait coverage (%)",
x = "Trait") +
coord_flip() +
theme_bw()
spcov %>%
arrange(spcov.greenandyellow, desc(organism_biosamp)) %>% mutate(order = 1:n()) %>%
mutate(organism_biosamp = reorder(organism_biosamp, order)) %>%
ggplot() +
geom_hline(yintercept = 50, colour = "red", alpha = 0.5, linetype = "dashed") +
geom_hline(yintercept = 80, colour = "red", alpha = 0.5, linetype = "dashed") +
geom_point(aes(x = organism_biosamp, y = spcov.all, fill = "black"), shape = 21, colour = "black", size = 1) +
geom_point(aes(x = organism_biosamp, y = spcov.green, fill = "green"), shape = 21, colour = "black", size = 1) +
geom_point(aes(x = organism_biosamp, y = spcov.yellow, fill = "yellow"), shape = 21, colour = "black", size = 1) +
geom_point(aes(x = organism_biosamp, y = spcov.greenandyellow, fill = "turquoise2"), shape = 21, colour = "black", size = 2.5) +
scale_fill_identity(guide = "legend", name = "Traits included",
breaks = c("black", "green", "yellow", "turquoise2"),
labels = c("all", "green", "yellow", "green + yellow")) +
coord_flip() +
theme_bw() +
theme(axis.text.y = element_text(size = 3.5)) +
labs(y = "Trait coverage per species (%)",
x = "Species")
#end
#' ---
#' title: "PCA SSWD"
#' author: "Rita Castilho rita.castil@gmail.com)"
#' date: "JULY 2021"
#' ---
#' ---
library(ggfortify)
library(mdatools)
library(FactoMineR)
library(factoextra)
library(ggpubr)
library(corrplot)
library(PCAmixdata)
#---------------------------------------------------------------------------#
# set working directory
# name for pdf
filename <- "RCNtest_2021.pdf"
# reading datafile
# the below was true the first time, when I manually moved from Google Sheet to a .txt file
#data.df<- read.table("RCNdatatest2.txt", header=TRUE, sep= "\t")
## BELOW USES THE DF FROM ABOVE CHUNK
data.df<-df
#a few columns are not part of the analysis such as
#code, species name, SSW and lat
#so, remove those columns
#replace numbers by the position of the column to be removed
#'data.frame':	117 obs. of  30 variables:
# 1$ organism_biosamp           : chr  "Acanthephyra purpurea" "Acanthurus olivaceus" "Acropora cervicornis" #"Acropora millepora" ...
# 2$ somePopsFWorBrackish       : num  0 0 0 0 0 0 0 0 0 0 ...
# 3$ isInvasiveRange            : num  0 0 0 0 0 0 0 0 0 0 ...
# 4 isMaybeHybrid              : num  0 0 0 0 0 1 1 0 0 0 ...
# 5 DiffbyDepthSuspected       : num  0 0 1 1 1 1 1 1 0 0 ...
# 6 isAdultBenthicMarine       : num  0 1 1 1 1 1 1 1 1 1 ...
# 7 isNektonSometimes          : num  1 0 0 0 0 0 0 0 0 0 ...
# 8 PLD_point                  : chr  NA "60.8" "10" "10" ...
# 9 PLD_minmax                 : chr  NA "40–70" "7–70" "3–93" ...
# 10$ PLDmin                     : num  NA 40 7 3 7 7 7 7 NA 7 ...
# 11$ PLDmax                     : num  NA 70 70 93 70 70 14 14 NA 11 ...
# 12$ PLDmidpoint                : num  NA 55 38.5 48 38.5 38.5 10.5 10.5 NA 9 ...
# 13$ isPlanktonic_atanypoint    : num  1 1 1 1 1 1 1 1 1 1 ...
# 14$ Spawning_mode              : chr  "I" "F" "F" "F" ...
# 15$ Larval_feeding             : chr  "P" "P" "L" "L" ...
# 16$ Large_Adult_Range          : num  1 0 0 0 0 0 0 0 0 0 ...
# 17$ ReturnToSpawningGround     : chr  "F" "F" "F" "F" ...
# 18$ Spawnlocation              : chr  "Deep" NA "Caribbean" "Indo-Pacific" ...
# 19$ Fecundity_EggsFemaleSpawn  : chr  "944±417" "37500" "10.4 – 21.8 mm3" "5.2 eggs/polp" ...
# 20$ Fecundity_SpawnFrequency   : chr  NA "continuous" "1–2" "1–2" ...
# 21$ Fecundity_EggSize          : chr  "1" "0.75" "0.65" "0.65" ...
# 22$ Body_Size                  : chr  "10" "26" "200" "200" ...
# 23$ Reproductive_Age           : chr  NA "2" "2" "2" ...
# 24$ Longevity                  : chr  NA "35" "INDET" "INDET" ...
# 25$ Generational_Structure     : chr  "I" "I" "I" "I" ...
# 26$ Asexual_Stage              : chr  "F" "no" "T" "T" ...
# 27$ Human_Interactions_economic: chr  NA "T (aquarium)" NA NA ...
# 28$ Census_Size                : chr  "vast" NA NA NA ...
# 29$ Genome_Size_MB             : chr  NA NA "384-447" "384-447" ...
# 30$ Genome_Size_picoGrams      : chr  NA NA NA NA ...
# then there are some that are still neither numeric nor logical FIX THESE NEXT IN RACHELS CODE
#Spawning mode 14 *** fixed
#larval feeding 15 *** fixed
#return to spawning ground 17 *** fixed
#generational structure 25 *** fixed
data.df <- data.df[ -c(1,9,11,12,18,19,20,24,26,27,28,29,30)]
# these all currenty excluded, but even what is in is maybe not yet recoded correctly
# check missing data
# because PLD has more than 20% missing data it should also be eliminated
# see 'trtcov' from previous chunk, remove more data if necessary, above I removed because they are not a fit for PCA yet
# OK but also 8 some things not coded right yet, actually none of the PLD have less thatn 20% missing for now
# also fecundity egg size, reproductive age
#data.df <- data.frame(lapply(data.df,as.numeric))
# missing values and data normalisation I"m not 100% sure how to steer this part
# but it doesn't like NA values so here I am learning some tidyverse stuff
# https://tidyr.tidyverse.org/reference/replace_na.html
data.df%>%replace_na(list(isPlanktonic_atanypoint = 0, Spawning_mode= 0))
#why not working hmm won't work if variable is a factor?
# but isPlankt is numeric
#                       Larval_feeding= 0, Large_Adult_Range= 0,
#                       ReturnToSpawningGround= 0,Body_Size= 0,
#                       Generational_Structure= 0))
# FINE FOR NOW USING BASE REPLACE
data.df[is.na(data.df)] <- 0
# obviously that is not best approach just getting code going again
# so we will next get intentional about fixing some data and deciding on recode of others
# missing values and data normalisation I"m not 100% sure how to steer this part
# OK removing more data because this code is very sensitive
#data.df<-data.df[-c(9,10,12,14)]
data.df$Body_Size<-as.numeric(data.df$Body_Size) # oh that was it maybe so check other excluded above
data.df$Reproductive_Age<-as.numeric(data.df$Reproductive_Age)
data.df$PLD_point<-as.numeric(data.df$PLD_point)
data.df$Fecundity_EggSize<-as.numeric(data.df$Fecundity_EggSize)
# missing values and data normalisation I"m not 100% sure how to steer this part
new.df <- pca.mvreplace(
data.df,
center = TRUE,
scale = TRUE,
maxncomp = 5, # the original value was 15 which is too high.
# I checked the scree plot below,
# and I think the number of PC could be 3 or 5
expvarlim = 0.95,
covlim = 10^-6,
maxiter = 100
)
##
res.pca <- PCA(new.df, graph = FALSE)
#scree.plot (percentage of explained variances x principal components)
scree.plot <- fviz_eig(res.pca, addlabels = TRUE, ylim = c(0, 50))
scree.plot
#obtain coordinates of each variable for the N-dimensions
var <- get_pca_var(res.pca)
var$coord
# loadings
# because the FactoMineR package does not give loadings, one can obtain them by
sweep(res.pca$var$coord,2,sqrt(res.pca$eig[1:ncol(res.pca$var$coord),1]),FUN="/")
# correlation matrix
corrplot <- corrplot(var$cos2, is.corr=TRUE)
# visualize Principal Component Analysis
fviz_pca_var(res.pca, col.var = "black")
#Warning messages for below:
#1: ggrepel: 88 unlabeled data points (too many overlaps). Consider increasing max.overlaps
#2: ggrepel: 88 unlabeled data points (too many overlaps). Consider increasing max.overlaps
var.plot <- fviz_pca_var(res.pca, col.var = "coord",
gradient.cols = c("#00AFBB", "#E7B800", "#FC4E07"),
repel = TRUE, # Avoid text overlapping,
label = "all"
)
var.plot
species.plot <- fviz_pca_ind(res.pca, col.ind = "coord",
gradient.cols = c("#00AFBB", "#E7B800", "#FC4E07"),
repel = TRUE # avoid text overlapping (slow if many points)
)
species.plot
# we now go into SSW specific things
#pca <- prcomp(new.df, center = TRUE, scale. = TRUE)
#ssw <- c(1,3,1,1,1,1,"?",1,2,3,"?",2,2,1,2,"?",1,1,1,1,2,2,3,2,3,1,1,3,0,3,3,1)
#ssw[ssw=="0"]<-"no"
#ssw[ssw=="1"]<-"affected"
#ssw[ssw=="2"]<-"some"
#ssw[ssw=="3"]<-"high"
#ssw[ssw=="?"]<-"unknown"
#ssw <- as.factor(ssw)
bi.plot <- fviz_pca_biplot(res.pca, axes = c(1, 2), geom = c("point", "text"),
gradient.cols = c("#00AFBB", "#E7B800", "#FC4E07"),
col.ind = "black", col.var = "cos2", label = "all",
invisible = "none", repel = T,
palette = NULL, addEllipses = FALSE,
title = filename)
bi.plot
# bar plot of variable contributions.The red dashed line indicates the
# expected average contribution. Id the contribution of the variables
# were unifirm, the value expected would be 1/number of variables
# (1/8=12.5%). Any variable with a larger contribution is considered
#as important in contributing to the component.
fviz_contrib(res.pca, choice = "var", axes =1:2, top = 10)
ggexport(plotlist = list(scree.plot, bi.plot, species.plot, var.plot,
corrplot),
filename = filename)
####################
####################
## another method
fit <- prcomp(na.omit(data.df),scale = TRUE)
summary(fit) # print variance accounted for
loadings(fit) # pc loadings
plot(fit,type="lines") # scree plot
fit$scores # the principal components
biplot(fit)
##
## Split quantitative and qualitative variables
split <- splitmix(data.df)
## FAMD
res.pcamix <- PCAmix(X.quanti=split$X.quanti,
X.quali=split$X.quali,
rename.level=TRUE,
graph=FALSE,
ndim=25)
## Apply varimax rotation to the first two PCs
res.pcarot <- PCArot(res.pcamix,
dim=2,
graph=FALSE)
## Visualize factor loadings before rotation
plot(res.pcamix,
choice="sqload",
coloring.var=TRUE,
axes=c(1, 2),
leg=TRUE, posleg="topleft", main="Variables before rotation",
xlim=c(0,1), ylim=c(0,1))
## Visualize factor loadings after rotation
plot(res.pcarot,
choice="sqload",
coloring.var=TRUE,
axes=c(1, 2),
leg=TRUE, posleg="topright", main="Variables after rotation",
xlim=c(0,1), ylim=c(0,1))
# Eigenvalues
eig.val <- get_eigenvalue(res.pca)
eig.val
# Results for Variables
res.var <- get_pca_var(res.pca)
res.var$coord          # Coordinates
res.var$contrib        # Contributions to the PCs
res.var$cos2           # Quality of representation
# Results for individuals
res.ind <- get_pca_ind(res.pca)
#res.ind$coord          # Coordinates
#res.ind$contrib        # Contributions to the PCs
#res.ind$cos2           # Quality of representation
#END
species.plot
within<-c(0.01,0.015,0.01,0.005,0.007,0.008,0.012, 0.02,0.018,0.0,0.001,0.01,0.015,0.01,0.005,0.007,0.008,0.012, 0.02,0.023,0.0,0.001)
between<-c(0.04,0.05,0.051,0.04,0.07,0.038,0.045,0.05,0.051,0.04,0.07, 0.05,0.051,0.04,0.07)
p1 <- hist(within)
p2 <- hist(between)
plot( p1, col=rgb(0,0,1,1/4), xlim=c(0,0.15))  # first histogram
plot( p2, col=rgb(1,0,0,1/4), xlim=c(0,0.15), add=T)  # second
within<-c(0.01,0.015,0.01,0.005,0.007,0.008,0.012, 0.02,0.018,0.0,0.001,0.01,0.015,0.01,0.005,0.007,0.008,0.012, 0.02,0.023,0.0,0.001)
between<-c(0.04,0.05,0.051,0.04,0.07,0.038,0.045,0.05,0.051,0.04,0.07, 0.05,0.051,0.04,0.07)
p1 <- hist(within)
p2 <- hist(between)
plot( p1, col=rgb(0,0,1,1/4), xlim=c(0,0.15))  # first histogram
plot( p2, col=rgb(1,0,0,1/4), xlim=c(0,0.15), add=T)  # second
plot( p1, col=rgb(0,0,1,1/4), xlim=c(0,0.25))  # first histogram
plot( p2, col=rgb(1,0,0,1/4), xlim=c(0,0.25), add=T)  # second
plot( p1, col=rgb(0,0,1,1/4), xlim=c(0,0.25))  # first histogram #
plot( p2, col=rgb(1,0,0,1/4), xlim=c(0,0.25), add=T)  # second
library(knitr)
library(learnPopGen)
# ***** IMPORTANT ****
# user must use install packages to add:
library(knitr)
library(learnPopGen)
library(ggplot2)
library(tidyverse)
library(shiny)
library(wesanderson)
library(devtools)
knitr::opts_chunk$set(echo = TRUE)
driftplot
#setwd("~/GitHub/molecoltext/")
# ***** IMPORTANT ****
# user must use install packages to add:
library(knitr)
#setwd("~/GitHub/molecoltext/")
# ***** IMPORTANT ****
# user must use install packages to add:
#library(knitr)
library(learnPopGen)
library(ggplot2)
library(tidyverse)
library(shiny)
library(wesanderson)
library(devtools)
knitr::opts_chunk$set(echo = TRUE)
#print(getwd())
today<-Sys.Date()
library(learnPopGen)
driftplot<-drift.selection(p0=0.2,Ne=500,w=c(1,1,1),ngen=2000,nrep=10)
#this is terrible slow code
library(ggplot2)
#shinyAppFile("/shiny_popgen-master/Drift/drift_app.R",options=list(width="100%",height=600))
# how do I get it to start off with frequency 0.2, certain generations and so on?
#run it and download the .csv, read back in and plot it!
#pop500<-read.csv("drift-simA.csv",header=T)
#ggplot(data = pop500, aes(x=generation, y=freq)) + geom_line(aes(colour=sim))
setwd("~/GitHub/molecoltext")
library(ggplot2)
shinyAppFile("shiny_popgen-master/Drift/drift_app.R",options=list(width="100%",height=700))
# ***** IMPORTANT ****
# user must use install packages to add:
library(knitr)
library(learnPopGen)
library(ggplot2)
library(tidyverse)
library(shiny)
library(wesanderson)
library(devtools)
knitr::opts_chunk$set(echo = TRUE)
setwd("~/GitHub/molecoltext")
shinyAppFile("shiny_popgen-master/Drift/drift_app.R",options=list(width="100%",height=700))
shinyAppFile("shiny_popgen-master/Drift/drift_app.R",options=list(width="100%",height=700))
install_tinytex()
install("tinytex")
library(tinytex)
install.packages("tinytex")
library(tinytex)
str(Sys.info())
Sys.info()
Sys.info$sysname
sysname
Sys.info(sysname)
str(Sys.info())
within<-c(0.01,0.015,0.01,0.005,0.007,0.008,0.012, 0.02,0.018,0.0,0.001,0.01,0.015,0.01,0.005,0.007,0.008,0.012, 0.02,0.023,0.0,0.001)
between<-c(0.04,0.05,0.051,0.04,0.07,0.038,0.045,0.05,0.051,0.04,0.07, 0.05,0.051,0.04,0.07)
p1 <- hist(within)
p2 <- hist(between)
plot( p1, col=rgb(0,0,1,1/4), xlim=c(0,0.25))  # first histogram #
plot( p2, col=rgb(1,0,0,1/4), xlim=c(0,0.25), add=T)  # second
rmarkdown::pandoc_version()
